---
- name: Create user groups with the correct gid.
  when: item.value.state is defined and item.value.state == "present"
  group:
    state: "{{ item.value.state }}"
    name: "{{ item.value.username }}"
    gid: "{{ item.value.uid }}"
  loop: "{{ aspects_local_users|dict2items }}"
  tags:
    - aspects_local_users
    - aspects_local_users_groups

- name: Set user state
  when: item.value.state is defined
  user:
    state: "{{ item.value.state }}"
    name: "{{ item.value.username }}"
    comment: "{{ item.value.fullname }}"
    password: "{{ item.value.crypted_pass }}"
    createhome: "yes"
    home: "{{ item.value.home|default('/home/' + item.value.username) }}"
    shell: "{{ item.value.shell }}"
    uid: "{{ item.value.uid }}"
    group: "{{ item.value.username }}"
  loop: "{{ aspects_local_users|dict2items }}"
  tags:
    - aspects_local_users

- name: Set system group state
  when: aspects_local_users_system_groups is defined
  group:
    state: "{{ item.value.state }}"
    name: "{{ item.value.name }}"
    gid: "{{ item.value.gid }}"
    system: "yes"
  loop: "{{ aspects_local_users_system_groups|default({})|dict2items }}"
  tags:
    - aspects_local_users

- name: Set system user state
  when: aspects_local_users_system_users is defined
  user:
    state: "{{ item.value.state }}"
    name: "{{ item.value.username }}"
    comment: "{{ item.value.fullname }}"
    password: "{{ item.value.crypted_pass }}"
    createhome: "yes"
    home: "{{ item.value.home|default('/home/' + item.value.username) }}"
    shell: "{{ item.value.shell }}"
    uid: "{{ item.value.uid }}"
    group: "{{ item.value.group|default(item.value.username) }}"
    system: "yes"
  loop: "{{ aspects_local_users_system_users|default({})|dict2items }}"
  tags:
    - aspects_local_users

- name: Add/Remove extra groups by OS family.
  when: aspects_local_users_groups is defined
  include_tasks: "addRemoveExtraGroups{{ ansible_os_family }}.yml"
  tags:
    - aspects_local_users
    - aspects_local_users_groups

- name: Set users extra groups by OS family.
  include_tasks: "setExtraGroups{{ ansible_os_family }}.yml"
  tags:
    - aspects_local_users
    - aspects_local_users_groups

- name: ensure user ssh keys are set
  when: aspects_local_users_ssh_keys is defined and item.value.state is defined
  authorized_key:
    state: "{{ item.value.state }}"
    user: "{{ item.value.username }}"
    key: "{{ item.value.key }}"
  loop: "{{ aspects_local_users_ssh_keys|dict2items }}"
  tags:
    - aspects_local_users
    - aspects_local_users_ssh_keys
